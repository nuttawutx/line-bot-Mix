# === Shared Setup ===
import os
import json
import base64
import re
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import gspread
from google.oauth2.service_account import Credentials  # ‡πÅ‡∏ó‡∏ô oauth2client
from dotenv import load_dotenv
from datetime import datetime
import pytz
import requests

load_dotenv()

GOOGLE_CREDENTIAL_BASE64 = os.getenv("GOOGLE_CREDENTIAL_BASE64")
cred_path = "google-credentials.json"
if GOOGLE_CREDENTIAL_BASE64:
    with open(cred_path, "w") as f:
        f.write(base64.b64decode(GOOGLE_CREDENTIAL_BASE64).decode("utf-8"))

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file(cred_path, scopes=scope)
client = gspread.authorize(creds)

app = Flask(__name__)

# === ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å Google Sheet ===
BOT_STATUS_SHEET = "BotStatus"
BOT_STATUS_WORKSHEET = "Status"
BOT_STATUS_CELL = "A2"
admin_ids = ["Ud686f3b906ac18e081626f3c5910ddd8"]  # <== ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô userId ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô

def get_system_status():
    sheet = client.open(BOT_STATUS_SHEET).worksheet(BOT_STATUS_WORKSHEET)
    value = sheet.acell(BOT_STATUS_CELL).value
    if value is None:
        return False
    return value.strip().lower() == "on"

def set_system_status(value):
    sheet = client.open(BOT_STATUS_SHEET).worksheet(BOT_STATUS_WORKSHEET)
    sheet.update_acell(BOT_STATUS_CELL, value.lower())

def register_employee(event, line_bot_api, spreadsheet_name, webhook_env_var, default_code, prefix=""):

    if not get_system_status():
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ö†Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß\n‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        )
        return

    text = event.message.text
    user_id = event.source.user_id

    lines = text.strip().splitlines()
    if len(lines) != 6:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:\n‡∏ä‡∏∑‡πà‡∏≠:\n‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô:\n‡∏™‡∏≤‡∏Ç‡∏≤:\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (DD-MM-YYYY):\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        )
        return

    expected_keys = {"‡∏ä‡∏∑‡πà‡∏≠", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"}
    data = {}
    for line in lines:
        if ":" not in line:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ':' ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ")
            )
            return
        key, val = line.split(":", 1)
        data[key.strip()] = val.strip()

    if set(data.keys()) != expected_keys:
        missing = expected_keys - set(data.keys())
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {', '.join(missing)}")
        )
        return

    if not re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"]):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (DD-MM-YYYY)")
        )
        return
    elif data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].strip().lower() not in ["‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô1"]:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô1' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        )
        return
    elif not all(data[key] for key in expected_keys):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        )
        return

    try:
        name, nickname = data["‡∏ä‡∏∑‡πà‡∏≠"], data["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô"]
        branch, postion, start = data["‡∏™‡∏≤‡∏Ç‡∏≤"], data["‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"], data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"]
        emp_type = data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].strip().lower()

        worksheet = client.open(spreadsheet_name).worksheet("MonthlyEmployeeWHLG" if emp_type == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô1" else "DailyEmployee" if emp_type == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" else "MonthlyEmployee")
        last_row = worksheet.get_all_values()[-1] if len(worksheet.get_all_values()) > 1 else []
        raw_code = last_row[2] if len(last_row) >= 3 else ""
        number_part = int(re.sub(r'\D', '', raw_code)) if raw_code.isdigit() or raw_code else default_code

        new_code = number_part + 1
        emp_code = prefix + str(new_code)

        now = datetime.now(pytz.timezone('Asia/Bangkok')).strftime("%d/%m/%Y %H:%M")

        worksheet.append_row(["", branch, emp_code, name, nickname, postion, start, "", emp_type, user_id, now])

        webhook_url = os.getenv(webhook_env_var)
        if webhook_url:
            requests.post(webhook_url, json={"sheet": worksheet.title})

        confirm_text = (
            f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n"
            f"‡∏£‡∏´‡∏±‡∏™: {emp_code}\n"
            f"‡∏ä‡∏∑‡πà‡∏≠: {name}\n"
            f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {postion}\n"
            f"‡∏™‡∏≤‡∏Ç‡∏≤: {branch}\n"
            f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: {start}\n"
            f"üìå ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"
        )
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=confirm_text))

    except Exception as e:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        )

# === Bot 1 ===
LINE_CHANNEL_ACCESS_TOKEN_1 = os.getenv("LINE_CHANNEL_ACCESS_TOKEN_1")
LINE_CHANNEL_SECRET_1 = os.getenv("LINE_CHANNEL_SECRET_1")
line_bot_api1 = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN_1)
handler1 = WebhookHandler(LINE_CHANNEL_SECRET_1)

@app.route("/callback1", methods=['POST'])
def callback1():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler1.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler1.add(MessageEvent, message=TextMessage)
def handle_message1(event):
    user_id = event.source.user_id
    text = event.message.text.strip().lower()

    if user_id in admin_ids:
        if text == "‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö":
            set_system_status("off")
            line_bot_api1.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"))
            return
        elif text == "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö":
            set_system_status("on")
            line_bot_api1.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"))
            return

    register_employee(event, line_bot_api1, "HR_EmployeeList", "APPS_SCRIPT_WEBHOOK1", default_code=90000)

# === Bot 2 ===
LINE_CHANNEL_ACCESS_TOKEN_2 = os.getenv("LINE_CHANNEL_ACCESS_TOKEN_2")
LINE_CHANNEL_SECRET_2 = os.getenv("LINE_CHANNEL_SECRET_2")
line_bot_api2 = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN_2)
handler2 = WebhookHandler(LINE_CHANNEL_SECRET_2)

@app.route("/callback2", methods=['POST'])
def callback2():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler2.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler2.add(MessageEvent, message=TextMessage)
def handle_message2(event):
    user_id = event.source.user_id
    text = event.message.text.strip().lower()

    if user_id in admin_ids:
        if text == "‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö":
            set_system_status("off")
            line_bot_api2.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢.."))
            return
        elif text == "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö":
            set_system_status("on")
            line_bot_api2.reply_message(event.reply_token, TextSendMessage(text="‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢..."))
            return

    if "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô1" in text:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô1 ‡πÉ‡∏ä‡πâ Sheet ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        register_employee(
            event,
            line_bot_api2,
            "HR_EmployeeListMikka",
            "APPS_SCRIPT_WEBHOOK2",
            default_code=20000,
        )
    elif "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" in text:
        register_employee(
            event,
            line_bot_api2,
            "HR_EmployeeListMikka",
            "APPS_SCRIPT_WEBHOOK2",
            default_code=2000,
            prefix="P"
        )
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        register_employee(
            event,
            line_bot_api2,
            "HR_EmployeeListMikka",
            "APPS_SCRIPT_WEBHOOK2",
            default_code=60000
        )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
